Changyang Xu (Charles)
SAFE_RM

  1 #!/bin/bash
  2 #safe remove
  3 #Changyang Xu
  4 ################################################
  5 # check if directory exists
  6 
  7 recycle_bin=~/deleted
  8 if [ ! -d ~/deleted ]
  9 then
 10         mkdir ~/deleted
 11         echo "just created deleted" 
 12 fi
 13 ################################################
 14 #Check if the 1st input is file or directory in home
 15 function fileordir() {
 16 if [ -e $j ]
 17 then
 18          echo "this is file"
 19 elif [ -d $j ]
 20 then
 21          echo "this is dir"
 22 
 23 fi
 24 }
 25 #################################################
 26 #Question number 4 ------display error message like rm
 27 function wrong() {
 28 if [ $# -lt 1 ]
 29 then
 30          echo "no file is provided"
 31 elif [ ! -e $j ]
 32 then
 33          echo "supplied file does not exist"
 34 elif [ -d $j ]
 35 then
 36          echo "directory provided instead of file"
 37 fi
 38 }
 39 #################################
 40 #phase1 number5
 41 function recyclefile() {
 42 inode=$(ls -il | tr -s " " | grep $j | cut -d" " -f1)
 43 filename=$(echo $j'_'$inode)
 44 path=$(find ~/project -name $j)
 45 #echo $path 
 46 filename2=$(echo $filename':'$path)
 47   if [ -e $j ]
 48   then
 49     echo $filename2 >> ~/.restore.info
 50     mv ~/project/$j ~/deleted
 51     mv ~/deleted/$j ~/deleted/$filename
 52   else
 53     exit
 54   fi
 55 }
 56 removeDir() {
 57     #echo $dirListd
 58     recursivepath=$(echo $dirListd | cut -d " " -f1)
 59     if [[ $nooption = true ]] ; then
 60         rm -r $recursivepath
 61     elif [[ $interactive = true  &&  $verbose = true ]] ; then
 62         rm -ivr $recursivepath
 63     elif [[ $interactive = true ]] ; then
 64         rm -ir $recursivepath
 65     elif [[ $verbose = true  ]] ; then
 66         rm -vr $recursivepath
 67     fi
 68 }
 69 recursiveFolder() {
 70     #echo "recursive folder"
 71     for j in $*
 72     do
 73         if [ -d $j ] ; then
 74              continue
 75         else recursiveFile $j
 76          fi
 77      done
 78      #echo $dirList
 79      dirListd=$(find $dirList -type d 2>/dev/null) #only directory
 80      for j in $dirListd
 81      do
 82          if [ -d $j ] ; then
 83               removeDir
 84           else
 85               continue
 86          fi
 87       done
 88 }
 89 recursiveFile() {
 90     #echo "recursive file"
 91     for j in $*
 92     do
 93         if [ -d $j ] ; then
 94             recursiveFolder $j
 95         else
 96             #ff=$(echo $j | rev | cut -d "/" -f1 | rev)
 97             justfile $j
 98         fi
 99     done
100 }
101 
102 #function recursion() {
103 #empty=$(find ~/project/$j -type f)  
104 #dirinode=$(ls -il | tr -s " " | grep -w $j | cut -d " " -f1)
105 #dirname=$(echo $j'_'$dirinode)
106 #dirpath=$(find ~/project -name $j)
107 #dirname2=$(echo $dirname':'$dirpath)
108 #if $recursion
109    # then 
110      #  if [ -z $empty ]
111 # check if there are files in the deleted directory
112      # then #there is no file
113          # echo "directory empty"
114          # echo $dirname2 >> ~/.restore.info
115           #rmdir ~/project/$j
116      # elif [ -n $empty ] #if there are files in the deleted dir
117      # then 
118        #   echo "directory not empty use recursion"
119      # fi 
120   # fi
121 #}
122 
123 justfile() {
124 for j in $*
125 do
126     #echo $j
127 #echo $interactive
128 #echo $verbose 
129     if [[ $nooption = true ]] ; then
130         inode=$(ls -i $j | tr -s " " | cut -d " " -f1)
131         ff=$(echo $j | rev | cut -d "/" -f1 | rev)
132         filename=$(echo $ff'_'$inode)
133         path=$(find ~/project -name $ff)
134         #echo $path
135         filename2=$(echo $filename':'$path)
136         echo $filename2 >> ~/.restore.info
137         mv ~/project/$j ~/deleted
138         mv ~/deleted/$ff ~/deleted/$filename
139 
140     elif [[ $interactive = false && $verbose = false ]]
141     then
142        echo "no option selected"
143        wrong $j
144        fileordir $j
145        recyclefile $j
146     elif [[ $interactive = true && $verbose = false ]]
147     then
148            echo "safe_rm: remove regular file '$j'?" 
149            read reply;
150            if [[ $reply = "y" || $replay = "Y" || $reply = "yes" ]]
151            then
152              echo "removed "$j""
153              fileordir $j
154              wrong $j
155              recyclefile $j
156            else
157              echo "wont remove"
158              exit
159            fi
160      elif [[ $interactive = false && $verbose = true ]]
161      then
162            echo "removed "$j""
163            fileordir $j
164            wrong $j
165            recyclefile $j
166       fi
167 done
168 }
169 
170 #main program
171 nooption=true
172 nteractive=false
173 verbose=false
174 recursion=false
175 #case for options
176 while getopts ivr opt
177    do
178      case $opt in
179      i) interactive=true
180           verbose=false
181           nooption=false ;;
182        v) interactive=false
183           verbose=true
184           nooption=false ;;
185        r) recursion=true ;;
186        R) recursion=true ;;
187       \?) echo "$0: invalid option --'$OPTARG'"
188           echo "Usage: sh $0 -i|-v filename1 filename2"
189           exit 1 ;;
190      esac
191    done
192   shift $(($OPTIND-1))
193 
194 for j in $*
195 do
196     if [ $j = "safe_rm" ]
197     then
198        echo "Attempting to delete safe_rm - operation aborted"
199        exit 1
200      elif [ $recursion = true ] &&  [[ -d $j || -e $j ]] ; then
201         dirList=$(find $j) #find even the files in directory
202         #ff=$dirList #this if for recursiveFolder find dirListd 
203         recursiveFolder $dirList
204      else
205         justfile $j
206      fi
207      echo "recursive remove directory complete!!"
208 done
209 
210 
                                                                                                      210,0-1       Bot

SAFE_RM_RESTORE	

  1 #!/bin/bash
  2 #This is safe_rm_restore
  3 
  4 function error() {
  5  name=$(grep ^$j ~/.restore.info)
  6  if [ $# -lt 1 ]
  7   then
  8     echo "no file is provided"
  9  elif [ -z $name ]
 10   then
 11     echo "supplied file does not exist"
 12  elif [ -n $name ]
 13   then
 14     echo "file enterred is correct"
 15  fi
 16 }
 17 recursiverestore() {
 18 if [ ! -d $originaldir ] ; then
 19    mkdir -p $originaldir #make parent dir
 20 fi
 21 mv ~/deleted/$inode $originaldir #move
 22 mv $originaldir/$inode $originaldir/$filename #rename
 23 sed -i "/^$j/d" ~/.restore.info #delete file line from restoreinfo
 24 #-i means edit file instead of print out ; /d means delete lines
 25 echo "restore complete"
 26 }
 27 
 28 function restore() {
 29 line=$(grep $j ~/.restore.info)
 30 #qqq_2081456:/home/changyang.xu/project/qqq
 31 path=$(grep $j ~/.restore.info | cut -d : -f2) 
 32 #home/changyang.xu/project/qqq 
 33 originaldir=$(dirname $path)
 34 #home/changyang.xu/project
 35 filename=$(grep $j ~/.restore.info | cut -d  _ -f1)
 36 #qqq
 37 inode=$(grep $j ~/.restore.info | cut -d : -f1)
 38 #qqq_2081456
 39   
 40   if [[ -n $name && -e $path ]]
 41   then  
 42     echo "Do you want to overwrite? y/n" 
 43     read reply;
 44     if [[ $reply = "y" || $reply = "Y" || $reply = "yes" ]]
 45     then
 46       echo "you rock"
 47       mv ~/deleted/$inode ~/project 
 48       rm ~/project/$filename
 49       mv ~/project/$inode ~/project/$filename
 50       sed -i "/^$j/d" ~/.restore.info 
 51     else
 52       echo "wont overwrite"     
 53       exit
 54     fi
 55   elif [[ ! -e $path && -n $name ]]
 56   then
 57     recursiverestore
 58   elif [ -z $name ]
 59   then
 60       echo "no such file to restore"
 61       exit
 62   fi
 63 }
 64 
 65 for j in $*
 66 do
 67    error $j
 68    restore $j
 69 done
                                                                                                      53,1          Bot

